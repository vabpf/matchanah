import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, useSearchParams, Link } from 'react-router-dom';
import Header from '../components/Header';
import Footer from '../components/Footer';
import Loading from '../components/Loading';
import OrderProgressBar from '../components/OrderProgressBar';
import { useAuth } from '../context/AuthContext';
import { useOrders } from '../hooks/useOrders';

const OrderDetail = () => {
  const { orderId } = useParams();
  const { user, isAuthenticated } = useAuth();
  const { fetchOrder, cancelOrder } = useOrders();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  
  const [order, setOrder] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showPaymentSuccess, setShowPaymentSuccess] = useState(false);

  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/login');
      return;
    }

    // Check if redirected from payment success
    const paymentStatus = searchParams.get('payment');
    if (paymentStatus === 'success') {
      setShowPaymentSuccess(true);
      // Remove the payment parameter from URL after 5 seconds
      setTimeout(() => {
        navigate(`/orders/${orderId}`, { replace: true });
        setShowPaymentSuccess(false);
      }, 5000);
    }

    if (orderId) {
      loadOrderDetail();
    }
  }, [orderId, isAuthenticated, navigate, searchParams]);

  const loadOrderDetail = async () => {
    setIsLoading(true);
    setError(null);

    try {
      // Try to get from cache first
      const cached = localStorage.getItem(`order_${orderId}`);
      if (cached) {
        const { data, timestamp } = JSON.parse(cached);
        // Use cached data if less than 2 minutes old
        if (Date.now() - timestamp < 2 * 60 * 1000) {
          setOrder(data);
          setIsLoading(false);
          return;
        }
      }

      // Fetch from server
      const result = await fetchOrder(orderId);
      
      if (result.success) {
        setOrder(result.data);
      } else {
        setError(result.error);
      }
    } catch (err) {
      setError('L·ªói khi t·∫£i th√¥ng tin ƒë∆°n h√†ng');
    } finally {
      setIsLoading(false);
    }
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    
    let date;
    if (dateString.toDate && typeof dateString.toDate === 'function') {
      date = dateString.toDate();
    } else if (dateString.seconds) {
      date = new Date(dateString.seconds * 1000);
    } else {
      date = new Date(dateString);
    }
    
    return date.toLocaleDateString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusText = (status) => {
    const statusMap = {
      pending: 'Ch·ªù x·ª≠ l√Ω',
      confirmed: 'ƒê√£ x√°c nh·∫≠n',
      processing: 'ƒêang x·ª≠ l√Ω',
      shipped: 'ƒêang v·∫≠n chuy·ªÉn',
      delivered: 'ƒê√£ giao h√†ng',
      cancelled: 'ƒê√£ h·ªßy',
      refunded: 'ƒê√£ ho√†n ti·ªÅn'
    };
    return statusMap[status] || status;
  };

  const handleCancelOrder = async () => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë∆°n h√†ng n√†y?')) {
      return;
    }

    const reason = prompt('L√Ω do h·ªßy ƒë∆°n h√†ng (t√πy ch·ªçn):') || '';
    
    const result = await cancelOrder(orderId, reason);
    
    if (result.success) {
      alert('ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng');
      // Reload order detail
      loadOrderDetail();
    } else {
      alert('L·ªói khi h·ªßy ƒë∆°n h√†ng: ' + result.error);
    }
  };

  const canCancelOrder = () => {
    if (!order) return false;
    return order.status === 'pending' || order.status === 'confirmed';
  };

  const getPaymentMethodText = (method) => {
    return method === 'COD' ? 'Thanh to√°n khi nh·∫≠n h√†ng' : 'Chuy·ªÉn kho·∫£n qua VietQR';
  };

  if (!isAuthenticated) {
    return <Loading />;
  }

  if (isLoading) {
    return (
      <div className="order-detail-page">
        <Header />
        <main className="order-detail-main">
          <div className="container">
            <Loading />
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  if (error || !order) {
    return (
      <div className="order-detail-page">
        <Header />
        <main className="order-detail-main">
          <div className="container">
            <div className="error-message">
              <h2>Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng</h2>
              <p>{error || 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.'}</p>
              <Link to="/orders" className="hero-cta-button">
                Quay l·∫°i l·ªãch s·ª≠ ƒë∆°n h√†ng
              </Link>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  return (
    <div className="order-detail-page">
      <Header />
      <main className="order-detail-main">
        <section className="order-detail-content">
          <div className="container">
            {/* Payment Success Banner */}
            {showPaymentSuccess && (
              <div className="payment-success-banner">
                <div className="success-content">
                  <span className="success-icon">üéâ</span>
                  <div className="success-text">
                    <h3>Thanh to√°n th√†nh c√¥ng!</h3>
                    <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thanh to√°n v√† ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.</p>
                  </div>
                </div>
              </div>
            )}
            
            <div className="order-header">
              <div className="order-info">
                <h1>Chi ti·∫øt ƒë∆°n h√†ng #{order.orderNumber}</h1>
                <p className="order-date">ƒê·∫∑t ng√†y: {formatDate(order.createdAt)}</p>
              </div>
              <div className="order-actions">
                <button onClick={loadOrderDetail} className="refresh-btn">
                  C·∫≠p nh·∫≠t
                </button>
                {canCancelOrder() && (
                  <button onClick={handleCancelOrder} className="cancel-order-btn">
                    H·ªßy ƒë∆°n h√†ng
                  </button>
                )}
              </div>
            </div>

            {/* Order Progress */}
            <div className="order-progress-section">
              <h2>Ti·∫øn ƒë·ªô ƒë∆°n h√†ng</h2>
              <OrderProgressBar currentStatus={order.status} />
            </div>

            <div className="order-details-grid">
              {/* Order Items */}
              <div className="order-items-section">
                <h2>S·∫£n ph·∫©m ƒë√£ ƒë·∫∑t</h2>
                <div className="order-items">
                  {order.items && order.items.map((item) => (
                    <div key={item.id} className="order-item">
                      <div className="item-image">
                        <img src={item.productImage} alt={item.productName} />
                      </div>
                      <div className="item-details">
                        <h3>{item.productName}</h3>
                        <p>ƒê∆°n gi√°: {formatPrice(item.price)}</p>
                        <p>S·ªë l∆∞·ª£ng: {item.quantity}</p>
                      </div>
                      <div className="item-total">
                        {formatPrice(item.total)}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Order Summary */}
              <div className="order-summary-section">
                <div className="summary-card">
                  <h2>T√≥m t·∫Øt ƒë∆°n h√†ng</h2>
                  <div className="summary-details">
                    <div className="summary-row">
                      <span>T·∫°m t√≠nh:</span>
                      <span>{formatPrice(order.subtotal || order.total)}</span>
                    </div>
                    <div className="summary-row">
                      <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                      <span>{formatPrice(order.shippingCost || 0)}</span>
                    </div>
                    <div className="summary-row">
                      <span>Thu·∫ø:</span>
                      <span>{formatPrice(order.tax || 0)}</span>
                    </div>
                    <div className="summary-row total">
                      <span>T·ªïng c·ªông:</span>
                      <span>{formatPrice(order.total)}</span>
                    </div>
                  </div>
                </div>

                {/* Shipping Info */}
                <div className="shipping-card">
                  <h3>Th√¥ng tin giao h√†ng</h3>
                  <div className="shipping-details">
                    <p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> {order.shippingInfo?.receiverName}</p>
                    <p><strong>ƒêi·ªán tho·∫°i:</strong> {order.shippingInfo?.phone}</p>
                    <p><strong>ƒê·ªãa ch·ªâ:</strong></p>
                    <p className="address-full">
                      {order.shippingInfo?.address}<br />
                      {order.shippingInfo?.ward}, {order.shippingInfo?.district}<br />
                      {order.shippingInfo?.province}
                    </p>
                  </div>
                </div>

                {/* Payment Info */}
                <div className="payment-card">
                  <h3>Th√¥ng tin thanh to√°n</h3>
                  <p><strong>Ph∆∞∆°ng th·ª©c:</strong> {getPaymentMethodText(order.paymentMethod)}</p>
                  {order.couponCode && (
                    <p><strong>M√£ gi·∫£m gi√°:</strong> {order.couponCode}</p>
                  )}
                </div>
              </div>
            </div>

            <div className="order-actions-bottom">
              <Link to="/orders" className="back-to-orders-btn">
                ‚Üê Quay l·∫°i l·ªãch s·ª≠ ƒë∆°n h√†ng
              </Link>
              
              {order.status === 'delivered' && (
                <Link to="/products" className="reorder-btn">
                  ƒê·∫∑t l·∫°i ƒë∆°n h√†ng
                </Link>
              )}
            </div>
          </div>
        </section>
      </main>
      <Footer />
    </div>
  );
};

export default OrderDetail;